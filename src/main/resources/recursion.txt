Рекурсия - подход решения задач в котором исходная задача решается в терминах меньших подзадач подобных исходной.
Рекурсия всегда имеет условие остановки.
При рекурсии фактически метод вызывает сам себя.

По отношению к тому как выполняется реккурсия она делится на head и tail.
Хед рекурсия выполняется до самой опреации в текущем фрейме.
Теил рекурсия выполняется после опреации в текущем фрейме.
Практически это в случае обхода связаного списка означает при хед рекурсии что сначала будет опрошен самый последний элемент, а затем первый (это обход в глубину), а
при теил рекурсии наоборот сначала первый.
Теил рекурсия легко может быть переписана через цикл.
Часто может рекурсия является смешанной, например, обработка узла бинарного дерева (сначала меньшие дочерние узлы, потом значение текущего узла, затем большие дочерние узлы).

Задача поиска н-го элемента последовательности Фиббоначи имеет сложность 2^n т.к. каждый эдемент есть сумма предыдущих двух, следовательно на каждом
шаге количество слагаемых удваивается, а шагов n-1.

Memoization процесс запоминание предыдущих результатов в рекурсивных вычислениях.
Реализация обычно в виде двумерного, или одномерного массива.

Динамическре программирование это решение проблемы разбиением на подзадачи, решение этих подзадач с сохранением результата в памяти.
Мемоизация движется top-down и представляет собой рекурсию оснащенную кешем.
Динамическое программирование движется bottom-up.
Динамическое программирование разворачивает рекурсию.

Задача биномиальных коэффициентов может быть решена динамически построением треугольника Паскаля, рекурсивно с помощью рекурентного соотношения (x+y)^n=(x+y)*(x+y)^n-1, или
С(k+1, n+1) = С(k, n) + С(k+1, n) (пусть к n элементам добавили 1, тогда выбрать k+1 из n+1 можно взяв новый элемент и к нему выбрав оставшиеся k из n С(k, n),
или не взяв новый выбрав k+1 из n С(k+1, n)), или из формулы для биномиальных коэффициентов.

Задача самого дешевого пути в матрице решается рекурсией со сложностью 2^m*n.
Рекурсией с мемоизацией со сложностью m*n.
Динамическим программированием со сложностью m*n.

Характерной чертой динамики является возможность разбить задачу на подзадачи и наличие пересекающихся подзадач.
Часто задача динамики связана с оптимизацией, поиска экстремальных решений, наличие общего числа чего-то.
Вообще возможность разбить задачу на подобную подзадачу это возможность решить задачу рекурсивно.

Задача подсчета количества способов набрать заданную сумму n с помощью заданных очков m решается рекурсивно со сложностью m^n.
Динамически со сложностью m*n.

Задача поиска подмассива максимальной суммы решается полным перебором со сложностью n^2.
Динамически со сложностью n.

Задача поиска расстояния Левенштейна между строками имеет рекурсивное решение со сложностью 3^n.
Динамически со сложностью n^2.
Матрица расстояний заполняется постолбцово, внешний индекс проходит символы первой строки, а внутренний второй строки.
editDistances[i-1][j] этот элемент соответствует случаю когда у строки-столбца удаляется символ
editDistances[i][j-1] этот элемент соответствует случаю когда у строки-столбца вставляется символ
editDistances[i-1][j-1] этот элемент соответствует случаю когда у строки-столбца обновляется символ

Задача поиска количества путей из левого верхнего угла матрицы в правый нижний имеет рекурсивное решение со сложностью 2^n.
Динамическое решение со сложностью n*m.

Задача проверки критерия чередующейся строки имеет рекурсивное решение со сложностью n^2.
Динамическое решение со сложностью n*m.

Задача поиска длины самой длинной подпоследовательности в строках имеет рекурсивное решение со сложностью n^2.
Динамическое решение со сложностью n*m.

Задача поиска длины самого длинного возрастающего подмассива имеет динамическое решение со сложностью n^2.
https://www.youtube.com/watch?v=fV-TF4OvZpk

Задача поиска длины самого длинного битонического подмассива имеет динамическое решение со сложностью n^2.

Задача поиска минимального количества монет для выплаты суммы имеет рекурсивное решение со сложностью 2^n.
Жадное решение со сложностью n.
Динамическое решение со сложностью n*m.

Задача поиска максимальной подстроки палиндрома имеет рекурсивное решение со сложностью 2^n.
Рекурсивное решение с мемоизацией со сложностью n^2.
Динамическое решение со сложностью n^2.